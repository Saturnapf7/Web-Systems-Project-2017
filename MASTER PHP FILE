<?php
  // Import PHPMailer classes into the global namespace
  // These must be at the top of your script, not inside a function
  use PHPMailer\PHPMailer\PHPMailer;
  use PHPMailer\PHPMailer\Exception;

  //Load composer's autoloader
  require_once("vendor/autoload.php");
  
  //Check if form was submitted
  if ($_SERVER['REQUEST_METHOD'] == "POST")
  {
    $name = $_POST['name'];
    $email = $_POST['email'];
    $phone = $_POST['phone'];
    $subject = $_POST['subject'];
    $message = $_POST['message'];

    $recipientEmail = "tommy@grizzleair.net";
    
    //Intialize errrors array
    $errors['errors'] = array();
    
    $data = array($name, $email, $phone, $subject, $message);
    
    //Santize all form data
    foreach($data as $d)
    {
      $d = sanitizeInput($d);
    }
    
    //Validate form data
    if (empty($name))
    {
      $errors['errors']['name'] = "Name can't be empty.";
    }
    elseif (strlen($name) < 2)
    {
      $errors['errors']['name'] = "Names must be at least 2 characters in length.";
    }
    elseif (!validateName($name))
    {
      $errors['errors']['name'] = "Names can only consist of letters, spaces, periods and hyphens.";
    }
	
    if (empty($email))
    {
      $errors['errors']['email'] = "Email can't be empty.";
    }
    elseif(!validateEmail($email))
    {
      $errors['errors']['email'] = "Email address is invalid. Please enter a valid address e.g, 'example@email.com'.";
    }
	
    if (empty($phone))
    {
      $errors['errors']['phone'] = "Phone can't be empty";
    }
    elseif (!validatePhone($phone))
    {
      $errors['errors']['phone'] = "Phone number is invalid. Please enter a valid number e.g, '000-000-0000' or '0000000000'.";
    }
	
    if (empty($subject))
    {
      $errors['errors']['subject'] = "Subject can't be empty.";
    }
    else if (strlen($subject) < 5)
    {
      $errors['errors']['subject'] = "Subject must be at least 5 characters in length.";
    }
    
    //Displays errors if array isn't empty
    if (count($errors['errors']) > 0)
    {
      echo json_encode($errors['errors']);
      exit;
    }
    
    try
    { 
       $mail = new PHPMailer(true);
	try 
	{  
		//Server settings	
		$mail->SMTPDebug  = 0;
		$mail->SMTPSecure = "none";  
		$mail->SMTPAuth   = false;
		$mail->Username   = "";
		$mail->Password   = "";
		$mail->Host       = "relay-hosting.secureserver.net";
		$mail->Port       = 25;                   

		//DKIM Settings
		$mail->setFrom('_mainaccount@grizzleair.net', 'Grizzleair.net');
		$mail->DKIM_domain = 'grizzleair.net';
		$mail->DKIM_private = 'private.key';
		$mail->DKIM_selector = '1512575398.grizzleair'; //Prefix for the DKIM selector
		$mail->DKIM_passphrase = ''; //leave blank if no Passphrase
		$mail->DKIM_identity = $mail->From;

		//Recipients
		$mail->addAddress($recipientEmail);
		//$mail->addReplyTo($email);

		//Content
		$mail->isHTML(true);
		$mail->Subject = "Customer Inquiry - $subject";
		$mail->Body = "<html><body><h1>Customer Information</h1><hr><br>
						<b>Name: </b>$name<br>
						<b>Email: </b>$email<br>
						<b>Phone: </b>$phone<hr><br>
						$message</body></html>";

		//Plain text message for non HTML clients		
		$mail->AltBody = "Customer Information\n
						  Name: $name\n
						  Email: $email\n
						  Phone: $phone\n\n
						  $message";
		$mail->send();

		echo json_encode("Thanks for contacting us! A representative should be contacting you in the next 1 - 3 business days.");
	}
	catch (Exception $e)
	{
	  echo json_encode('There was a problem sending your message. Please try again later.');
	  //echo json_encode('Mailer Error: ' . $mail->ErrorInfo);
	}
       
    }
    catch (PDOException $e)
    {
      echo $e->getMessage();
    }
  }
  
  /**
   * sanitizeInput()
   *
   * Cleans and removes spaces and uncessary characters from variable.
   *
   */
  function sanitizeInput($input)
  {
    $input = strip_tags($input);
    $input = trim($input);
    $input = htmlspecialchars($input);
    $input = htmlentities($input);
    return $input;
  }
  
  /**
   *
   * validateName()
   *
   * Checks if name is in an acceptable format
   *
   */
   function validateName($name)
   {
     $nameRegex = "/^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$/";
     if (preg_match($nameRegex, $name))
     {
       return true;
     }
     return false; 
   }
  
  /**
   * validateEmail()
   *
   * Checks if email address is in a valid format
   *
   */
  function validateEmail($email)
  {
    $emailRegex = "/^[^@\s]+@[^@\s]+\.[^@\s]+$/";
    if (preg_match($emailRegex, $email))
    {
      return true;
    }
    return false;
  }
  
  /**
   * validatePhone()
   *
   * Checks if phone number is in a valid format
   *
   */
  function validatePhone($phone)
  {
    $phoneRegex = "/(\d{3}\-\d{3}\-\d{4})$/"; // 000-000-0000
    if (preg_match($phoneRegex, $phone) || (strlen($phone) == 10 && ctype_digit($phone)))
    {
      return true;
    }
    else
    {
      return false;
    }  
  }
?>
